set nocompatible				" Must be first line
filetype off
let mapleader = "\<Space>"

" Base setting
colorscheme SolarizedDark
syntax enable
syntax on						" Syntax highlighting
set nu							" Line numbers on
set relativenumber              " Relative number on
set encoding=utf-8
set autoindent					" Indent at the same level of the previous line
set hlsearch					" Highlight search terms
set incsearch                   " Find as you type search

set expandtab                   " Tabs are spaces, not tabs
set tabstop=4					" An indentation every four columns
set shiftwidth=4 
set softtabstop=4

autocmd FileType yaml,css set sw=2 ts=2

set laststatus=2				" 总是显示状态栏
set ruler						" 显示光标当前位置

"set foldmethod=indent 			" 基于缩进进行代码折叠
set foldmethod=syntax 			" 基于语法进行代码折叠
set nofoldenable				" 启动 vim 时关闭折叠代码

set tags=./.tags;,.tags

" #### Vim-plug settings
" Specify a directory for plugins
" - For Neovim: ~/.local/share/nvim/plugged
" - Avoid using standard Vim directory names like 'plugin'
call plug#begin('~/.vim/plugged')

" NERD tree will be loaded on the first invocation of NERDTreeToggle command
Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }
Plug 'Valloric/YouCompleteMe', { 'do': './install.py --clang-completer --go-completer --rust-completer' }
Plug 'Lokaltog/vim-powerline'
Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }
Plug 'Raimondi/delimitMate'
Plug 'ludovicchabant/vim-gutentags'
Plug 'skywind3000/asyncrun.vim'
Plug 'SirVer/ultisnips'
Plug 'rust-lang/rust.vim'

" Initialize plugin system
call plug#end()



" ##### ultisnips config start
let g:UltiSnipsExpandTrigger="<c-j>"
" ##### ultisnips config end


" ##### AsyncRun config start
" 自动打开 quickfix window ，高度为 6
let g:asyncrun_open = 6
 
" 任务结束时候响铃提醒
let g:asyncrun_bell = 1
 
" 设置 F10 打开/关闭 Quickfix 窗口
nnoremap <F10> :call asyncrun#quickfix_toggle(6)<cr>
" ##### AsyncRun config end

" ##### Nerdtree Config start
nmap tt :NERDTreeToggle<CR>
let NERDTreeShowHidden=1
" ##### Nerdtree Config end

" ##### vim-gutentags Config start
" gutentags 搜索工程目录的标志，碰到这些文件/目录名就停止向上一级目录递归
let g:gutentags_project_root = ['.root', '.svn', '.git', '.hg', '.project']
 
" 所生成的数据文件的名称
let g:gutentags_ctags_tagfile = '.tags'
 
" 将自动生成的 tags 文件全部放入 ~/.cache/tags 目录中，避免污染工程目录
let s:vim_tags = expand('~/.cache/tags')
let g:gutentags_cache_dir = s:vim_tags
 
" 配置 ctags 的参数
let g:gutentags_ctags_extra_args = ['--fields=+niazS', '--extra=+q']
let g:gutentags_ctags_extra_args += ['--c++-kinds=+px']
let g:gutentags_ctags_extra_args += ['--c-kinds=+px']
 
" 检测 ~/.cache/tags 不存在就新建
if !isdirectory(s:vim_tags)
    silent! call mkdir(s:vim_tags, 'p')
endif
" ##### vim-gutentags Config end


" ##### YouCompleteMe Config start
"let g:ycm_server_keep_logfiles = 1
"let g:ycm_server_log_level = 'debug'
let g:ycm_server_python_interpreter='/usr/bin/python'
let g:ycm_global_ycm_extra_conf = '~/.vim/_ycm_extra_conf.py'
autocmd InsertLeave * if pumvisible() == 0|pclose|endif "离开插入模式后自动关闭预览窗口
inoremap <expr> <CR>       pumvisible() ? "\<C-y>" : "\<CR>"    "回车即选中当前项
" 上下左右键的行为 会显示其他信息
inoremap <expr> <Down>     pumvisible() ? "\<C-n>" : "\<Down>"
inoremap <expr> <Up>       pumvisible() ? "\<C-p>" : "\<Up>"
inoremap <expr> <PageDown> pumvisible() ? "\<PageDown>\<C-p>\<C-n>" : "\<PageDown>"
inoremap <expr> <PageUp>   pumvisible() ? "\<PageUp>\<C-p>\<C-n>" : "\<PageUp>"

"let g:ycm_confirm_extra_conf=0                  " 不显示开启vim时检查ycm_extra_conf文件的信息
"let g:ycm_collect_identifiers_from_tags_files=1 " 开启基于tag的补全，可以在这之后添加需要的标签路径
"let g:ycm_collect_identifiers_from_comments_and_strings = 0 "注释和字符串中的文字也会被收入补全
"let g:ycm_complete_in_comments = 1  "在注释输入中也能补全
"let g:ycm_complete_in_strings = 1   "在字符串输入中也能补全

let g:ycm_min_num_of_chars_for_completion=2     " 输入第2个字符开始补全
let g:ycm_seed_identifiers_with_syntax=1        " 开启语义补全

"当补全完成时，是否自动关闭展示的预览窗口，默认 0
"let g:ycm_autoclose_preview_window_after_completion=1
"当补全插入时，是否自动关闭展示的预览窗口，默认 0
let g:ycm_autoclose_preview_window_after_insertion=1

let g:ycm_min_num_identifier_candidate_chars = 2
"set completeopt=longest,menu	"让Vim的补全菜单行为与一般IDE一致(参考VimTip1228)
set completeopt=menu,menuone
let g:ycm_add_preview_to_completeopt = 0
"let g:ycm_show_diagnostics_ui = 0
"let g:ycm_collect_identifiers_from_comments_and_strings = 1
"let g:ycm_complete_in_strings=1

let g:ycm_semantic_triggers =  {
    \ 'c,cpp,python,java,go,erlang,perl,rust': ['re!\w{2}'],
    \ 'cs,lua,javascript': ['re!\w{2}'],
    \ }

let g:ycm_filetype_whitelist = {
			\ "c":1,
			\ "cpp":1,
			\ "objc":1,
			\ "sh":1,
			\ "zsh":1,
			\ "zimbu":1,
			\ "rust":1,
			\ }

" ##### YouCompleteMe Config end

" ----- vim go config start
let g:go_template_autocreate = 0
let g:go_fmt_command = "goimports"
" ----- vim go config end

" ----- vim rust config start
let g:autofmt_autosave = 1
" ----- vim rust config end
