# Path to your oh-my-zsh installation.
export ZSH=~/.config/oh-my-zsh

# bullet-train config
#export BULLETTRAIN_TIME_BG=11
export BULLETTRAIN_GIT_BG=11
BULLETTRAIN_PROMPT_ORDER=(
  status
  git
  dir
  time
)

# Set name of the theme to load.
# Look in ~/.oh-my-zsh/themes/
# Optionally, if you set this to "random", it'll load a random theme each
# time that oh-my-zsh is loaded.
#ZSH_THEME="bullet-train-oh-my-zsh-theme/bullet-train"
ZSH_THEME="bira"

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion. Case
# sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# The optional three formats: "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(git macos xcode swiftpm docker z direnv)

# User configuration

#export PATH="/Users/carl/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin"
# export MANPATH="/usr/local/man:$MANPATH"

source $ZSH/oh-my-zsh.sh

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
if [[ -n $SSH_CONNECTION ]]; then
  export EDITOR='vim'
else
  export EDITOR='nvim'
fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"

[ -f $ZSH_CUSTOM/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh ] && source $ZSH_CUSTOM/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh

#---- My config
export DEFAULT_USER=carl
export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8
export TERM=xterm-256color

# ruby rvm settings
export PATH="$PATH:$HOME/.rvm/bin" # Add RVM to PATH for scripting
[[ -s $HOME/.rvm/scripts/rvm ]] && source $HOME/.rvm/scripts/rvm

# Golang settings
export GOPATH=$HOME/go

# Python settings
[ -x "$(command -v python3)" ] && export PATH="$PATH:$(python3 -m site --user-base)/bin"

# Rust settings
export CARGO_NET_GIT_FETCH_WITH_CLI=true

# Dev setting
export BXSHARE="/opt/bochs/share/bochs"
export PATH="/usr/local/bin:$PATH:/opt/bochs/bin:$HOME/.local/bin:$GOPATH/bin:/var/lib/snapd/snap/bin"
export THEOS=/opt/theos

# Homebrew env setting
if test -x "/home/linuxbrew/.linuxbrew/bin/brew"; then
  # linux homebrew
  eval $(/home/linuxbrew/.linuxbrew/bin/brew shellenv) > /dev/null 2>&1
fi
if test -x "/opt/homebrew/bin/brew"; then
  # macOS homebrew
  eval "$(/opt/homebrew/bin/brew shellenv)" > /dev/null 2>&1
fi

# Proxy
alias proxy_all_set="export http_proxy='http://127.0.0.1:1091' && export https_proxy='http://127.0.0.1:1091' && export all_proxy='http://127.0.0.1:1091' && ftp_proxy='http://127.0.0.1:1091'"
alias proxy_all_unset="unset http_proxy && unset https_proxy && unset all_proxy && unset ftp_proxy"

alias proxy_unset="unset ALL_PROXY && unset http_proxy && unset https_proxy && unset ftp_proxy"

proxy_set() {
  proxy_addr="$1"
  if test -z "${proxy_addr}"; then
    proxy_addr="127.0.0.1:1090"
  fi
  export ALL_PROXY="socks5://${proxy_addr}"
  export http_proxy="http://${proxy_addr}"
  export https_proxy="http://${proxy_addr}"
  export ftp_proxy="http://${proxy_addr}"
  echo "proxy is set, address: ${proxy_addr}"
}
proxy_set

show_proxy_cmd () {
  hostIp=$(ip -o route get to 114.114.114.114 | sed -n 's/.*src \([0-9.]\+\).*/\1/p')
  echo "set proxy:"
  echo "export ALL_PROXY=socks5://${hostIp}:1090 && export http_proxy='http://${hostIp}:1090' && export https_proxy='http://${hostIp}:1090' && export ftp_proxy='http://${hostIp}:1090'"
  echo "unset proxy:"
  echo "unset ALL_PROXY && unset http_proxy && unset https_proxy && unset ftp_proxy"
}

# custom local setting
[ -f ~/.zshrc.local ] && source ~/.zshrc.local

# fzf settings
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# nvm settings
export NVM_DIR="$HOME/.nvm"
if test -d "${NVM_DIR}"; then
    [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
fi

# gvm settings
[[ -s "$HOME/.gvm/scripts/gvm" ]] && source "$HOME/.gvm/scripts/gvm"


#THIS MUST BE AT THE END OF THE FILE FOR SDKMAN TO WORK!!!
export SDKMAN_DIR="${HOME}/.sdkman"
[[ -s "${HOME}/.sdkman/bin/sdkman-init.sh" ]] && source "${HOME}/.sdkman/bin/sdkman-init.sh"

if test "${VIMRUNTIME}" = "/usr/share/nvim/runtime"; then
  # if zsh is opened in nvim terminal, unset VIMRUNTIME
  # solve issue that error message occurs when open vim
  export VIMRUNTIME=""
fi

sw_pr () {
  BRANCH="$1"
  if test -z "$BRANCH"; then
    echo "[INFO] No branch found, using 'develop' as default"
    BRANCH="develop"
  fi

  repo_name="$(git remote -v | grep '^servicewall' | grep '(push)' | awk '{print $2}' | awk -F/ '{print $NF}' | sed 's/.git$//g')"
  if test -z "$repo_name"; then
    echo "[ERROR] can not get repository name."
    return 2
  fi

  current_branch="$(git rev-parse --abbrev-ref HEAD)"
  if test "${current_branch}" = "HEAD"; then
    echo "[ERROR] can not find any branch for HEAD."
    return 2
  fi

  # git pull --rebase servicewall $BRANCH
  git push -f origin $current_branch
  GH_PR_URL="https://github.com/Servicewall/${repo_name}/compare/${BRANCH}...webfrogs:${current_branch}"
  if test -x "$(command -v xdg-open)"; then
    xdg-open "$GH_PR_URL"
  elif test -x "$(command -v open)"; then
    open "$GH_PR_URL"
  else
    echo "[ERROR] Can not open url automatically, copy url below to open it in browser."
    echo "$GH_PR_URL"
  fi
}

sw_clone () {
  SW_GIT_REPO="$1"
  if test -z "$SW_GIT_REPO"; then
    echo "[ERROR] No git repo."
    return 2
  fi
  git clone $SW_GIT_REPO
  projectName=$(basename $SW_GIT_REPO | awk -F. '{print $1}')
  cd $projectName
  git remote remove origin
  git remote add servicewall $SW_GIT_REPO
  git remote add origin $(echo $SW_GIT_REPO | sed 's/:Servicewall/:webfrogs/')
  git fetch servicewall
  git submodule update --init --recursive
}

print_proxy_cmd() {
  proxy_addr="$1"
  if test -z "${proxy_addr}"; then
    proxy_addr="$(ip -o route get to 114.114.114.114 | sed -n 's/.*src \([0-9.]\+\).*/\1/p'):1090"
  fi
  if test -z "${proxy_addr}"; then
    proxy_addr="127.0.0.1:1090"
  fi
  echo "export http_proxy='http://${proxy_addr}' && export https_proxy='http://${proxy_addr}'"
}
